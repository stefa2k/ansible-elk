---
- name: Install required system packages
  apt: 
    name: "{{ item }}" 
    state: latest 
    update_cache: yes
  loop: 
  - git
  become: yes

- name: Set correct vm.max_map_count
  sysctl:
    name: vm.max_map_count
    value: '262145'
    state: present
    sysctl_set: yes
  become: yes

- name: Clone docker-elk
  git:
    repo: "https://github.com/stefa2k/docker-elk"
    dest: "{{ elk_install_path }}"
    force: yes
  become: yes

- name: Change file ownership and group of clone
  file:
    state: directory
    path: "{{ elk_install_path }}"
    owner: "{{ elk_user }}"
    group: "{{ elk_user }}"
    recurse: yes
  become: yes

- name: Shutdown all services in case this is a reinstall
  shell: "docker-compose down"
  args:
    chdir: "{{ elk_install_path }}"

- name: Generate docker-compose file
  template:
    src: docker-compose.yaml.j2
    dest: "{{ elk_install_path }}/docker-compose.yaml"
    owner: "{{ elk_user }}"
    group: "{{ elk_user }}"
    mode: 0644

- name: Generate logstash.conf file
  template:
    src: logstash.conf.j2
    dest: "{{ elk_install_path }}/config/logstash/pipeline/logstash.conf"
    owner: "{{ elk_user }}"
    group: "{{ elk_user }}"
    mode: 0644

- name: Generate elasticsearch.yaml file
  template:
    src: elasticsearch.yaml.j2
    dest: "{{ elk_install_path }}/config/elasticsearch.yaml"
    owner: "{{ elk_user }}"
    group: "{{ elk_user }}"
    mode: 0644

- name: Generate kibana.yaml file
  template:
    src: kibana.yaml.j2
    dest: "{{ elk_install_path }}/config/kibana.yaml"
    owner: "{{ elk_user }}"
    group: "{{ elk_user }}"
    mode: 0644

- name: Start Elasticsearch
  shell: "docker-compose up -d elastic"
  args:
    chdir: "{{ elk_install_path }}"

- name: Wait for elasticsearch to build cluster
  uri:
    url: "http://{{ hostvars[inventory_hostname].elk_listen_ip }}:9200/_cluster/health?wait_for_nodes={{ ansible_play_hosts|length }}&timeout=10s"
  register: elastic_cluster_status
  until: elastic_cluster_status.status == 200
  retries: 360
  delay: 1

- name: Create index templates
  block:
    uri:
      url: "http://{{ hostvars[inventory_hostname].elk_listen_ip }}:9200/_index_template/template_{{ my_idx }}"
      method: PUT
      body_format: json
      body: "{{ item }}"
    with_file: "{{ index_template_files }}"
    loop_control:
      index_var: my_idx
    run_once: yes
  when: index_template_files | length > 0

- name: Start Kibana
  shell: "docker-compose up -d kibana"
  args:
    chdir: "{{ elk_install_path }}"
  when: hostvars[inventory_hostname].kibana_enabled

- name: Wait for Kibana to start up
  uri:
    url: "http://{{ hostvars[inventory_hostname].elk_listen_ip }}:5601/api/status"
  register: kibana_status
  until: kibana_status.status == 200 and kibana_status.json.status.overall.state == "green"
  retries: 360
  delay: 1
  when: hostvars[inventory_hostname].kibana_enabled

- name: Create dashboards
  block:
    uri:
      url: "http://{{ hostvars[inventory_hostname].elk_listen_ip }}:5601/api/kibana/dashboards/import?exclude=index-pattern"
      method: POST
      body_format: json
      body: "{{ item }}"
    with_file: "{{ dashboard_files }}"
  when: hostvars[inventory_hostname].kibana_enabled and dashboard_files | length > 0

- name: Start Logstash
  shell: "docker-compose up -d logstash"
  args:
    chdir: "{{ elk_install_path }}"
  when: hostvars[inventory_hostname].logstash_enabled
